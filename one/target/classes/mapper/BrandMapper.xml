<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace ：名称空间-->

<mapper namespace="mapper.BrandMapper">

<!--<sql id="brand_column">-->
<!--    id,brand_name as brandName,company_name as companyName,ordered,description,status-->
<!--</sql>-->


<!--  id唯一标识    type：映射的类型，支持别名
  里面 id标签是主键字段映射  column是一般字段的映射
        column是表的列名     property实体类的属性名
  -->
    <resultMap id="barandResultMap" type="brand">
        <result column="brand_name" property="brandName"></result>
        <result column="company_name" property="companyName"></result>
    </resultMap>



    <select id="selectAll" resultMap="barandResultMap">
    select
           *
    from tb_brand;
    </select>














<!--
            id查询
            parameterType 设置参数类型，可以忽略
            特殊字符
                    1、转义,转义符&
                    2、CDATA
                    -->
    <select id="selectById" resultMap="barandResultMap">
        select * from tb_brand where id = #{id};

    </select>



















<!--    条件查询-->

    <!--<select id="selectByCondition" resultMap="barandResultMap">
        select *
        from tb_brand
        where
              status = #{status}
        and company_name like #{companyName}
        and brand_name like #{brandName}
    </select>-->











<!--    动态条件查询-->
    <select id="selectByCondition" resultMap="barandResultMap">
        select *
        from tb_brand
#          where 1=1
<where>
              <if test="status != null">
                  and status = #{status}
              </if>
           <if test="companyName != null and companyName !=''">
               and company_name like #{companyName}
           </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
</where>
    </select>










<!--单条件查询-->
 <!--   <select id="selectByConditionSingle" resultMap="barandResultMap">
    select *
from tb_brand
where
    <choose>&lt;!&ndash;相当于switch&ndash;&gt;
        <when test="status != null">  &lt;!&ndash;相当于case&ndash;&gt;
             status = #{status}
        </when>
        <when test="companyName != null and companyName !=''">  &lt;!&ndash;相当于case&ndash;&gt;
            company_name like #{companyName}
        </when>
        <when test="brandName != null and brandName != ''">  &lt;!&ndash;相当于case&ndash;&gt;
             brand_name like #{brandName}
        </when>
        <otherwise>
            1=1
        </otherwise>
    </choose>
    </select>-->





    <select id="selectByConditionSingle" resultMap="barandResultMap">
        select *
        from tb_brand
        <where>
        <choose><!--相当于switch-->
            <when test="status != null">  <!--相当于case-->
                status = #{status}
            </when>
            <when test="companyName != null and companyName !=''">  <!--相当于case-->
                company_name like #{companyName}
            </when>
            <when test="brandName != null and brandName != ''">  <!--相当于case-->
                brand_name like #{brandName}
            </when>

        </choose>
        </where>
    </select>





<!--添加-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
insert into tb_brand( brand_name, company_name, ordered, description, status)
VALUES (#{brandName},#{companyName},#{ordered},#{description},#{status})

    </insert>






<!--    修改-->
    <update id="update">
    update tb_brand
        <set>
        <if test="brandName != null and brandName != ''">
            brand_name = #{brandName},
        </if>
        <if test="companyName != null and companyName != ''">
            company_name = #{companyName},
        </if>
        <if test="ordered != null and ordered !=''">
            ordered = #{ordered},
        </if>
        <if test="description != null and description != ''">
            description = #{description},
        </if>
        <if test="status != null ">
            status = #{status}
        </if>
        </set>
    where id = #{id}
    </update>

<!--删除一个-->
    <delete id="deleteById">
        delete  from  tb_brand where id = #{id}
    </delete>



<!--批量删除    mybatis会将数组封为一个Map集合，
*默认:array = 数组
*可以用@Param来改变名称-->
    <delete id="deleteByIds">
        delete  from  tb_brand where id
        in
            <foreach collection="ids" item="id" separator="," open="(" close=")">#{id}
            </foreach>

    </delete>

</mapper>